{"version":3,"sources":["App.js","index.js"],"names":["Selector","props","useReducer","state","action","opts","hist","nhist","id","newstate","curhist","length","pop","newhist","push","i","findIndex","it","splice","manageOpts","source","chk","map","item","nitem","undefined","find","hit","val","text","color","initialOpts","params","URLSearchParams","window","location","search","index","get","options","dispatch","Options","items","className","style","fontWeight","type","checked","onChange","ReactDOM","render","document","getElementById"],"mappings":"kLAmFeA,G,MA3EE,SAACC,GAChB,IAD0B,EAmDEC,sBALT,SAACC,EAAOC,GACzB,IAdiBC,EAAMC,EAcnBC,EApCa,SAACC,EAAIC,EAAUC,GAC9B,GAAe,GAAZD,EAAiB,CAEhB,GAAqB,GAAlBC,EAAQC,OAGP,MADc,CAACD,EAAQE,MAAOJ,GAG9B,IAAIK,EAAO,YAAOH,GAElB,OADAG,EAAQC,KAAKN,GACNK,EAGX,IAAIA,EAAO,YAAOH,GAEdK,EAAIL,EAAQM,WAAU,SAACC,GAAD,OAAQA,GAAMT,KAGxC,OAFAK,EAAQK,OAAOH,EAAG,GAEXF,EAkBDM,CAAWf,EAAOgB,QAAShB,EAAOiB,IAAKlB,EAAMG,MAEzD,MAAO,CAACD,MAhBSA,EAeKF,EAAME,KAfLC,EAeWC,EAdzBF,EAAKiB,KAAI,SAACC,GACb,IAAIC,EAAK,eAAOD,GAMhB,YALyCE,GAAtCnB,EAAKoB,MAAK,SAACC,GAAD,OAASJ,EAAKf,IAAMmB,KAC3BH,EAAMI,KAAM,EAEZJ,EAAMI,KAAM,EAEXJ,MAQQlB,KAAOC,KAhDZ,CAAC,CAACC,GAAG,MAAOoB,KAAM,EAAOC,KAAO,KAAMC,MAAQ,UAAW,CAACtB,GAAG,MAAOoB,KAAM,EAAOC,KAAO,KAAMC,MAAQ,WAAY,CAACtB,GAAG,MAAOoB,KAAM,EAAOC,KAAO,KAAMC,MAAQ,UAE9J,SAACC,GAEd,IADJ,IAAMC,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QACtCC,EAAQ,EAAGA,EAAQN,EAAYpB,OAAQ0B,IAC5CN,EAAYM,GAAOR,KAAOG,EAAOM,IAAI,MAAQD,GAEjD,MAAO,CAAChC,KAAM0B,EAAazB,KAAM,OARb,mBAmDnBiC,EAnDmB,KAmDVC,EAnDU,KAqDpBC,EAAU,SAACxC,GACb,OACIA,EAAMyC,MAAMrC,KAAKiB,KAAI,SAACC,GACpB,OACI,sBAAKoB,UAAU,SAAf,UACKpB,EAAKK,IAAM,uBAAOgB,MAAO,CAACC,WAAY,QAA3B,SAAqCtB,EAAKM,OAAgB,sCAASN,EAAKM,KAAd,OACtE,wBAAOc,UAAU,SAAjB,UACA,uBAAOG,KAAK,WAAWC,QAAUxB,EAAKK,IAAKoB,SAAa,kBAAMR,EAAS,CAACpB,OAASG,EAAKf,GAAIa,IAAME,EAAKK,SACrG,sBAAMe,UAAS,wBAAmBpB,EAAKO,MAAxB,iBAJUP,EAAKf,QAWhD,OACE,qBAAKmC,UAAY,YAAjB,SACI,cAACF,EAAD,CAASC,MAASH,QCxE1BU,IAASC,OACL,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.d99f67a5.chunk.js","sourcesContent":["import './App.css';\n/* Componente de lista de tareas */\nimport  {useEffect, useReducer} from 'react';\n/*TODO: \n    - Dark Mode\n    - Transitions\n*/\n\nconst Selector = (props) => {   \n  let initialOpts = [{id:\"it1\", val : false, text : null, color : 'violet'}, {id:\"it2\", val : false, text : null, color : 'magenta'}, {id:\"it3\", val : false, text : null, color : 'blue'}];\n  /* Tomar parametros de la URL y agregarlos a los objs de las opciones */\n  const setOptions = (initialOpts) => {\n    const params = new URLSearchParams(window.location.search)\n        for (let index = 0; index < initialOpts.length; index++) {\n            initialOpts[index].text = params.get('var' + index)\n        }\n        return {opts: initialOpts, hist: []};\n    }\n   \n  const manageOpts = (id, newstate, curhist) => {\n      if(newstate == true){\n          // Agregar a activos\n          if(curhist.length == 2){\n              // Nuevo arreglo : Ãºltimo elemento + nuevo\n              let newhist = [curhist.pop(), id];\n              return newhist;\n          }else{\n              let newhist = [...curhist];\n              newhist.push(id);\n              return newhist;\n          }\n      }else{\n          let newhist = [...curhist];\n          // Buscar item desactivado en la lista\n          let i = curhist.findIndex((it) => it == id);\n          newhist.splice(i, 1);\n          // Eliminar el item desactivado de la lista\n          return newhist;\n      }\n  };\n\n  const manageChk = (opts, hist) => {\n      return opts.map((item) => {\n          let nitem = {...item}\n          if(hist.find((hit) => item.id == hit) == undefined){\n                nitem.val = false;\n          }else{\n                nitem.val = true;\n          }\n          return nitem;\n      });\n  }\n  \n\n  const selReducer = (state, action) => {\n    let nhist = manageOpts(action.source, !action.chk, state.hist);\n    let nopts = manageChk(state.opts, nhist);\n    return {opts: nopts, hist : nhist};\n  };\n  const [options, dispatch] = useReducer(selReducer, initialOpts, setOptions);\n  \n  const Options = (props) => {\n      return (\n          props.items.opts.map((item) => {\n            return (\n                <div className=\"optbox\" key={item.id} >\n                    {item.val ? <label style={{fontWeight: 'bold'}}>{item.text}</label> : <label> {item.text} </label>}\n                    <label className=\"switch\">\n                    <input type=\"checkbox\" checked= {item.val} onChange = { () => dispatch({source : item.id, chk : item.val})} />\n                    <span className={`slider slider-${item.color} round`}></span>\n                </label>\n            </div>)\n          })\n      )\n  }\n\n  return (\n    <div className = \"container\">\n        <Options items = {options} />\n    </div>\n  )\n};\n\nexport default Selector;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport Selector from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Selector />\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}